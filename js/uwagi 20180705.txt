Kilka uwag do kodu z SVN.


-rozdzielamy kod na mniejsze funkcje 
-unikamy dużych kawałków kodu - kod który nie mieści się na jednej stronie edytora jest trudny do analizy i zrozumienia
-nazywamy funkcje tak aby wiadomo było co one robią
-dodałem wywołanie funkcji do walidacji (zaimplementuj ją)

*******PRZED************
function onFormSubmit() {
  recordID++;
  var phoneInputValue = document.querySelector('#phoneNumber').value;
  var nameInputValue = document.querySelector('#name').value;
  var lastNameInputValue = document.querySelector('#lastName').value;
  var record = {
    "phone": phoneInputValue,
    "name": nameInputValue,
    "lastName": lastNameInputValue,
    "uniqueID": recordID
  }
  saveRecordToDatabase(record, recordID);
}

*******PO************
function onFormSubmit() {
  var record = collectFormData();  
  if(!validateRecord(record))
	  return;
  assignUniqueRecordID(record);
  saveRecordToDatabase(record);
  refreshView();
}

****************************************************
MVC - Model View Controller
Przeczytaj w internecie o MVC, o tym co to jest M/V/C
W naszym przypadku:
	M - Model (dane)
		u nas to operacje na "bazie danych" (dodawanie, usuwanie rekordów z listy)
	V - View (widok danych - w naszym przypadku lista rekordów)
		u nas to operacje związane z wyświetlaniem listy 
	C - logika aplikacji 
		u nas to operacje pobierania danych z formularza, walidacja, wywołanie zapisu do bazy, etc

W MVC chodzi o to, żeby oddzielić logikę(operacje "biznesowe") od danych i od widoku. 
	-Nie chcemy mieć żadnej logiki w kodzie który wyświetla rekordy
	-nie chcemy mieć żadnej logiki w kodzie który ma trzymać dane 



****************************************************

Nie bardzo rozumiem dlaczego iterujesz po kolei (od 0 do recordID).
Gdy ktos usunie rekord ze srodka listy (czyli np. rekord o ID = 5) to co wyswietlisz dla 5?
Lepiej iterowac po zawartosci bazy (kluczach)
*******PRZED************

var i;
function renderList() {
  // recordID = 0;
  for(i = 0 ;i < recordID; i++) {
    // var createLi = document.createElement('li');
    // createLi.textContent = "Hello";
    // list.appendChild(createLi);
  }
}
	
*******PO************	
function renderList(db) {
	clearList();
	// iterate over keys (records)
	for (let key of db.keys()) {
	  renderRecord(db.get(key));
	}
}
	
	
	

****************************************************
-zbyt dużo parametrów funkcji
-funkcja która wyswietla pojedynczy rekord nie potrzebuje całej listy rekordów

*******PRZED************

function displayList(map, record, recordID) {
  var row = document.createElement('li');
  var editButton = document.createElement('button');
  editButton.classList.add("contacts__button--edit");
  editButton.textContent = "Edit";
  var deleteButton = document.createElement('button');
  deleteButton.classList.add("contacts__button--delete");
  deleteButton.textContent = "Delete";
  deleteButton.onclick = function() {
    //ta funkcja usuwa wybrany element
    list.removeChild(list.childNodes[map.get(recordID)["uniqueID"]]);
    // deleteRecordFromDatabase();
  };
  row.textContent = "Phone: " + map.get(recordID)["phone"] + "  " +
  "Name: " + map.get(recordID)["name"] + "  " +
  "Lastname: " + map.get(recordID)["lastName"] + "  " +
  "ID: " + map.get(recordID)["uniqueID"];
  row.appendChild(editButton);
  row.appendChild(deleteButton);
    list.appendChild(row);
  }
*******PO************	
function renderRecord(record) {
  var row = document.createElement('li');
  var editButton = document.createElement('button');
  editButton.classList.add("contacts__button--edit");
  editButton.textContent = "Edit";
  var deleteButton = document.createElement('button');
  deleteButton.classList.add("contacts__button--delete");
  deleteButton.textContent = "Delete";
  deleteButton.onclick = function() {
    deleteRecordFromDatabase(record.uniqueID);	//usun rekord
	refreshView();	//odswiez widok
  };
  row.textContent = "Phone: " + record.phone + "  " +
  "Name: " + record.name + "  " +
  "Lastname: " + record.lastName + "  " +
  "ID: " + record.uniqueID;
  row.appendChild(editButton);
  row.appendChild(deleteButton);
    list.appendChild(row);
}




****************************************************
*******PRZED************
*******PO************	
